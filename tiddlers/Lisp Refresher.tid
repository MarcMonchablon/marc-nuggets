created: 20140921213008417
modified: 20141016141141323
tags: Lisp Refresher
title: Lisp Refresher
type: text/vnd.tiddlywiki

//Disclaimer//: Most (if not all) of the things written in this section is taken (sometime verbatim) from the excellent book 'Land of Lisp' by Conrad Barski.

* [[Defining stuff in Lisp]]
* [[Lambda on Lisp]]
* [[Manipulating cons cells]]
* [[Control Flow in Lisp]]
** [[Cool tricks with conditions]]
* [[Comparing stuff in Lisp]]
* [[Lisp data structures]]
* [[Lisp quasiquoting]]
* [[Lisp I/O]]

!! Conventions

* When defining a ''predicate'' (a function that return either //nil// or a truth value), it is customary to append the letter ''p'' at the end of his name.
* Lisp can treat program code and data interchangeably. A programming language that use the same data structures to code data and program code is called //homoiconic// (Which is, incidentally, a wonderful pseudonym probably already taken on Tumblr).
* Rules of indentation and commenting can be found here : http://dept-info.labri.fr/~strandh/Teaching/MTP/Common/Strandh-Tutorial/indentation.html http://people.ace.ed.ac.uk/staff/medward2/class/moz/cm/doc/contrib/lispstyle.html


!! Misc

; eval
: One of the most powerfull function of lisp : treat the content of the thing given to him as code that is to be executed.
: //__Note__: ''eval'' can look enticing, but experienced Lispers only use it sparsely. A beginning Lisper will often use it instead of defining a Lisp macro. Also obvious security risk.//

; mapcar
: Take a function and a list, and apply this function to all the elements of the list.
: >`(mapcar #'sqrt '(4 9 25))`
: `(2.0 3.0 5.0)`
: // __Note__: The #' symbol is a shorthand for the function operator, used by lisp interpreted to disambiguate between parameter name and function name.//

; apply
: Pass it a function and a list of objects, and it pretend that the items in the list are separate objects and pass them to the given function as such.
: >``(append `((mary had) (a) (little lamb))``
: `((MARY HAD) (A) (LITTLE LAMB))`
: >``(apply #'append `((mary had) (a) (little lamb))``
: `(MARY HAD A LITTLE LAMB)`
: // __Note__: You can run into problems when using apply to a very large list (it use target which have a limited number of allowed argument. This value can be checked with ''call-argument-limit'')//.

; append
: Well, append things. Duh !
: >`(append '(mary had) '(a) '(little lamb))`
: `MARY HAD A LITTLE LAMB`

; remove-if-not
: `(remove-if-not #'predicate myList)`
: Remove every element of the list which does not satisfy the given predicate.

; find
: Searches a list for an item, then returns that found item. We pass to ''find'' a //keyword parameter//.
: ``(find `y                  ``
: ``      `((5 x) (3 y) (7 z))``
: ``      :key #'cadr)``
: -> `(3 Y)`

; push
: push an element to the begining of a list.
: ``(defparameter *foo* `(1 2 3))``
: ``(push 7 *foo*)``
: also equivalent to :
: ``(setf *foo* (cons 7 *foo*))``

; printc
: Print string

; ash  (ash a b)
: Bitwise shift variable a by b bits

; expt (epxt a b)
: Return a^b

; progn
: Wedge an extra command in a simple proposition
: Only the last evaluation is returned as the value of the full expression.